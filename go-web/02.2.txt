定义变量::

var avriableName type
var vname1, vname2, vname3 type
var avriableName type = value
var vname1, vname2, vname3 type = v1, v2, v3
var vname1, vname2, vname3 = v1, v2, v3
_, b := 34, 35   // _是特殊变量名,任何赋予它的值都会被丢弃

常量::

const constantName = value
const Pi float32 = 3.1415926
const Pi = 3.1415926
const i = 10000
const MaxThread = 10
const prefix = "astaxie_"
Go 常量和一般程序语言不同的是，可以指定相当多的小数位数(例如200位)， 
若指定給float32自动缩短为32bit，指定给float64自动缩短为64bit.

内置基础类型::

Boolean:
在Go中，布尔值的类型为bool，值是true或false，默认为false。
//示例代码
var isActive bool  // 全局变量声明
var enabled, disabled = true, false  // 忽略类型的声明
func test() {
    var available bool  // 一般声明
    valid := false      // 简短声明
    available = true    // 赋值操作
}

数值类型:
整数类型有无符号和带符号两种。Go同时支持int和uint，这两种类型的长度相同，
但具体长度取决于不同编译器的实现。
Go里面也有直接定义好位数的类型：rune, int8, int16, int32, int64
和byte, uint8, uint16, uint32, uint64。其中rune是int32的别称，byte是uint8的别称。
需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错。

尽管int的长度是32 bit, 但int 与 int32并不可以互用。

浮点数的类型有float32和float64两种（没有float类型），默认是float64。

Go还支持复数。它的默认类型是complex128（64位实数+64位虚数）
var c complex64 = 5+5i
//output: (5+5i)
fmt.Printf("Value is: %v", c)

字符串:
我们在上一节中讲过，Go中的字符串都是采用UTF-8字符集编码。字符串是用一对双引号（""）或
反引号（` `）括起来定义，它的类型是string。
//示例代码
var frenchHello string  // 声明变量为字符串的一般方法
var emptyString string = ""  // 声明了一个字符串变量，初始化为空字符串
func test() {
    no, yes, maybe := "no", "yes", "maybe"  // 简短声明，同时声明多个变量
    japaneseHello := "Konichiwa"  // 同上
    frenchHello = "Bonjour"  // 常规赋值
}

字符串是不可变的，例如下面的代码会报错
var s string = "hello"
s[0] = 'c'

真的要修改，可以用如下实现
package main

import "fmt"

func main() {
	s := "hello"
	c := []byte(s) // 将字符串 s 转换为 []byte 类型
	c[0] = 'c'
	s2 := string(c) // 再转换回 string 类型
	fmt.Printf("%s\n", s2)
}

Go中可以使用+操作符来连接两个字符串：
package main

import "fmt"

func main() {
	s := "hello,"
	m := " world"
	a := s + m
	fmt.Printf("%s\n", a)
}

修改字符串也可写为:
package main

import "fmt"

func main() {
	s := "hello"
	s = "c" + s[1:] // 字符串虽不能更改，但可进行切片操作
	fmt.Printf("%s\n", s)
}

如果要声明一个多行的字符串怎么办？可以通过`来声明：
m := `hello
    world`
	
` 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，
它没有字符转义，换行也将原样输出。例如本例中会输出：
hello
    world

错误类型:
Go内置有一个error类型，专门用来处理错误信息，
Go的package里面还专门有一个包errors来处理错误：
package main

import (
	"errors"
	"fmt"
)

func main() {
	err := errors.New("emit macho dwarf: elf header corrupted")
	if err != nil {
		fmt.Print(err)
	}
}

array::

var arr [n]type   //在[n]type中，n表示数组的长度，type表示存储元素的类型

var arr [10]int  // 声明了一个int类型的数组
arr[0] = 42      // 数组下标是从0开始的
arr[1] = 13      // 赋值操作
fmt.Printf("The first element is %d\n", arr[0])  // 获取数据，返回42
fmt.Printf("The last element is %d\n", arr[9]) //返回未赋值的最后一个元素，默认返回0

a := [3]int{1, 2, 3} // 声明了一个长度为3的int数组
b := [10]int{1, 2, 3} // 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0
c := [...]int{4, 5, 6} // 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度

// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素
doubleArray := [2][4]int{[4]int{1, 2, 3, 4}, [4]int{5, 6, 7, 8}}

// 上面的声明可以简化，直接忽略内部的类型
easyArray := [2][4]int{{1, 2, 3, 4}, {5, 6, 7, 8}}

slice::

var fslice []int   // 和声明array一样，只是少了长度

slice := []byte {'a', 'b', 'c', 'd'}

// 声明一个含有10个元素元素类型为byte的数组
var ar = [10]byte {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'}

// 声明两个含有byte的slice
var a, b []byte

// a指向数组的第3个元素开始，并到第五个元素结束，
a = ar[2:5]
//现在a含有的元素: ar[2]、ar[3]和ar[4]

// b是数组ar的另一个slice
b = ar[3:5]
// b的元素是：ar[3]和ar[4]

slice有几个有用的内置函数：

len 获取slice的长度
cap 获取slice的最大容量
append 向slice里面追加一个或者多个元素，然后返回一个和slice一样类型的slice
copy 函数copy从源slice的src中复制元素到目标dst，并且返回复制的元素的个数

//slice容量为8 array[:2], array[4:]
var array [10]int
slice := array[2:4]

//slice容量为5
slice = array[2:4:7]
如果slice是这样的形式array[:i:j]，即第一个参数为空，默认值就是0。

map::
map也就是Python中字典的概念，它的格式为 map[keyType]valueType
map的读取和设置也类似slice一样，通过key来操作，只是slice的index只能是｀int｀类型，
而map多了很多类型，可以是int，可以是string及所有完全定义了==与!=操作的类型

// 声明一个key是字符串，值为int的字典,这种方式的声明需要在使用之前使用make初始化
var numbers map[string]int
// 另一种map的声明方式
numbers := make(map[string]int)
numbers["one"] = 1  //赋值
numbers["ten"] = 10 //赋值
numbers["three"] = 3

fmt.Println("第三个数字是: ", numbers["three"]) // 读取数据
// 打印出来如:第三个数字是: 3

package main

import (
	"fmt"
)

func main() {
	// 初始化一个字典
	rating := map[string]float32{"C": 5, "Go": 4.5, "Python": 4.5, "C++": 2}
	// map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true
	csharpRating, ok := rating["C#"]
	if ok {
		fmt.Println("C# is in the map and its rating is ", csharpRating)
	} else {
		fmt.Println("We have no rating associated with C# in the map")
	}

	delete(rating, "C") // 删除key为C的元素
	fmt.Println("now is in the map and its rating is", rating)
}

make、new操作:
make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。
make只能创建slice、map和channel并且返回一个有初始值(非零)的T类型

零值:
关于“零值”，所指并非是空值，而是一种“变量未填充前”的默认值，通常为0。 此处罗列 部分类型 的 “零值”
int     0
int8    0
int32   0
int64   0
uint    0x0
rune    0 //rune的实际类型是 int32
byte    0x0 // byte的实际类型是 uint8
float32 0 //长度为 4 byte
float64 0 //长度为 8 byte
bool    false
string  ""

