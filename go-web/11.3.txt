11.3 Go怎么写测试用例::

Go语言中自带有一个轻量级的测试框架testing和自带的go test命令来实现单元测试和性能测试

如何编写测试用例:

由于go test命令只能在一个相应的目录下执行所有文件，所以我们接下来新建一个项目目录gotest
在该目录下面创建两个文件：gotest.go和gotest_test.go

gotest.go

package gotest


import (
    "errors"
)


func Division(a, b float64) (float64, error) {
    if b == 0 {
        return 0, errors.New("除数不能为0")
    }


    return a / b, nil
}

测试用例代码:
package gotest


import (
    "testing"
)


func Test_Division_1(t *testing.T) {
    if i, e := Division(6, 2); i != 3 || e != nil { //try a unit test on function
        t.Error("除法函数测试没通过") // 如果不是如预期的那么就报错
    } else {
        t.Log("第一个测试通过了") //记录一些你期望记录的信息
    }
}

func Test_Division_2(t *testing.T) {
    if _, e := Division(6, 0); e == nil { //try a unit test on function
        t.Error("Division did not work as expected.") // 如果不是如预期的那么就报错
    } else {
        t.Log("one test passed.", e) //记录一些你期望记录的信息
    }
}   

func Test_Division_3(t *testing.T) {
    t.Error("就是不通过")
}

//be care
文件名必须是_test.go结尾的，这样在执行go test的时候才会执行到相应的代码
你必须import testing这个包
所有的测试用例函数必须是Test开头
测试用例会按照源代码中写的顺序依次执行
测试函数TestXxx()的参数是testing.T，我们可以使用该类型来记录错误或者是测试状态
测试格式：func TestXxx (t *testing.T),Xxx部分可以为任意的字母数字的组合，但是首字母不能是小写字母[a-z]，例如Testintdiv是错误的函数名。
函数中通过调用testing.T的Error, Errorf, FailNow, Fatal, FatalIf方法，说明测试不通过，调用Log方法用来记录测试的信息。