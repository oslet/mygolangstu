7.6 字符串处理::

字符串操作:

func Contains(s, substr string) bool
字符串s中是否包含substr，返回bool值

func Join(a []string, sep string) string
字符串链接，把slice a通过sep链接起来

func Index(s, sep string) int
在字符串s中查找sep所在的位置，返回位置值，找不到返回-1

func Repeat(s string, count int) string
重复s字符串count次，最后返回重复的字符串

func Replace(s, old, new string, n int) string
在s字符串中，把old字符串替换为new字符串，n表示替换的次数，小于0表示全部替换

func Split(s, sep string) []string
把s字符串按照sep分割，返回slice

func Trim(s string, cutset string) string
在s字符串的头部和尾部去除cutset指定的字符串

func Fields(s string) []string
去除s字符串的空格符，并且按照空格分割返回slice

package main

import (
	"fmt"
	"strings"
)

func main() {
	fmt.Println(strings.Contains("seafood", "foo"))
	fmt.Println(strings.Contains("seafood", "bar"))
	fmt.Println(strings.Contains("seafood", ""))
	fmt.Println(strings.Contains("", ""))

	s := []string{"foo", "bar", "baz"}
	fmt.Println(strings.Join(s, ", "))

	fmt.Println(strings.Index("chicken", "ken"))
	fmt.Println(strings.Index("chicken", "dmr"))

	fmt.Println("ba" + strings.Repeat("na", 2))

	fmt.Println(strings.Replace("oink oink oink", "k", "ky", 2))
	fmt.Println(strings.Replace("oink oink oink", "oink", "moo", -1))

	fmt.Printf("%q\n", strings.Split("a,b,c", ","))
	fmt.Printf("%q\n", strings.Split("a man a plan a canal panama", "a "))
	fmt.Printf("%q\n", strings.Split(" xyz ", ""))
	fmt.Printf("%q\n", strings.Split("", "Bernardo O'Higgins"))

	fmt.Printf("[%q]\n", strings.Trim(" !!! Achtung !!!", "! "))

	fmt.Printf("Fields are: %q", strings.Fields(" foo bar baz "))
}

//output:
/*
true
false
true
true
foo, bar, baz
4
-1
banana
oinky oinky oink
moo moo moo
["a" "b" "c"]
["" "man " "plan " "canal panama"]
[" " "x" "y" "z" " "]
[""]
["Achtung"]
Fields are: ["foo" "bar" "baz"]
*/


字符串转换:

Append 系列函数将整数等转换为字符串后，添加到现有的字节数组中。
package main

import (
	"fmt"
	"strconv"
)

func main() {
	str := make([]byte, 0, 100)
	str = strconv.AppendInt(str, 4567, 2)
	str = strconv.AppendBool(str, false)
	str = strconv.AppendQuote(str, "abcdfeg")
	str = strconv.AppendQuoteRune(str, '单')

	fmt.Println(string(str))
}
//ouput:
4567false"abcdfeg"'单'

Format 系列函数把其他类型的转换为字符串
package main

import (
	"fmt"
	"strconv"
)

func main() {
	a := strconv.FormatBool(false)
	b := strconv.FormatFloat(123.23, 'g', 12, 64)
	c := strconv.FormatInt(1234, 10)
	d := strconv.FormatUint(12345, 10)
	e := strconv.Itoa(1023)
	fmt.Println(a, b, c, d, e)
}
//output:
false 123.23 1234 12345 1023

Parse 系列函数把字符串转换为其他类型
package main

import (
	"fmt"
	"strconv"
)

func checkError(e error) {
	if e != nil {
		fmt.Println(e)
	}
}

func main() {
	a, err := strconv.ParseBool("false")
	checkError(err)
	b, err := strconv.ParseFloat("123.23", 64)
	checkError(err)
	c, err := strconv.ParseInt("1234", 10, 64)
	checkError(err)
	d, err := strconv.ParseUint("12345", 10, 64)
	checkError(err)
	e, err := strconv.Atoi("1023")
	checkError(err)
	fmt.Println(a, b, c, d, e)
}
//output:
false 123.23 1234 12345 1023
