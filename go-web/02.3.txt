流程控制::

if:
if x > 10 {
    fmt.Println("x is greater than 10")
} else {
    fmt.Println("x is less than 10")
}

// 计算获取值x,然后根据x返回的大小，判断是否大于10。
if x := computedValue(); x > 10 {
    fmt.Println("x is greater than 10")
} else {
    fmt.Println("x is less than 10")
}

//这个地方如果这样调用就编译出错了，因为x是条件里面的变量
fmt.Println(x)

if integer == 3 {
    fmt.Println("The integer is equal to 3")
} else if integer < 3 {
    fmt.Println("The integer is less than 3")
} else {
    fmt.Println("The integer is greater than 3")
}

goto:
Go有goto语句——请明智地使用它。用goto跳转到必须在当前函数内定义的标签。例如假设这样一个循环：
package main

import "fmt"

func main() {
	i := 0
Here: //这行的第一个词，以冒号结束作为标签
	fmt.Println(i)
	i++
	goto Here //跳转到Here去
}

for:
for expression1; expression2; expression3 {
    //...
}

expression1、expression2和expression3都是表达式，
其中expression1和expression3是变量声明或者函数调用返回值之类的，
expression2是用来条件判断，expression1在循环开始之前调用，
expression3在每轮循环结束之时调用。

package main

import "fmt"

func main() {
	sum := 0
	for index := 0; index < 10; index++ {
		sum += index
	}
	fmt.Println("sum is equal to :", sum)
}

有些时候如果我们忽略expression1和expression3：
sum := 1
for ; sum < 1000; {
	sum += sum
}
其中;也可以省略，那么就变成如下的代码了，是不是似曾相识？对，这就是while的功能。
sum := 1 {
	for sum < 1000 {
		sum += sum 
	}
}

在循环里面有两个关键操作break和continue ,break操作是跳出当前循环，
continue是跳过本次循环。当嵌套过深的时候，break可以配合标签使用，
即跳转至标签所指定的位置，详细参考如下例子：

package main

import "fmt"

func main() {
	for index := 10; index > 0; index-- {
		if index == 5 {
			//break
			continue
		}
		fmt.Println(index)
	}
}
// break 10、9、8、7、6
// continue 10、9、8、7、6、4、3、2、1

for配合range可以用于读取slice和map的数据：
package main

import "fmt"

func main() {
	m := map[string]float64{"a": 5, "b": 8, "c": 11}
	for k, v := range m {
		fmt.Println("map's key:", k)
		fmt.Println("map's value", v)
	}
}

由于 Go 支持 “多值返回”, 而对于“声明而未被调用”的变量, 编译器会报错, 在这种情况下, 
可以使用_来丢弃不需要的返回值 例如
package main

import "fmt"

func main() {
	m := map[string]float64{"a": 5, "b": 8, "c": 11}
	for _, v := range m {
		fmt.Println("map's val:", v)
	}
}

switch:
switch sExpr {
case expr1:
    some instructions
case expr2:
    some other instructions
case expr3:
    some other instructions
default:
    other code
}

sExpr和expr1、expr2、expr3的类型必须一致。Go的switch非常灵活，
表达式不必是常量或整数，执行的过程从上至下，直到找到匹配项；
而如果switch没有表达式，它会匹配true。
package main

import "fmt"

func main() {
	i := 10
	switch i {
	case 1:
		fmt.Println("i is equal to 1")
	case 2, 3, 4:
		fmt.Println("i is equal to 2, 3 or 4")
	case 10:
		fmt.Println("i is equal to 10")
	default:
		fmt.Println("All I know is that i is an integer")
	}
}

在第5行中，我们把很多值聚合在了一个case里面，同时，Go里面switch默认相当于每个case最后带有break，
匹配成功后不会自动向下执行其他case，而是跳出整个switch, 
但是可以使用fallthrough强制执行后面的case代码。
package main

import "fmt"

func main() {
	integer := 6
	switch integer {
	case 4:
		fmt.Println("The integer was  <=4")
		fallthrough
	case 5:
		fmt.Println("The integer was <=5")
		fallthrough
	case 6:
		fmt.Println("The integer was <=6")
		fallthrough
	case 7:
		fmt.Println("The integer was <=7")
		fallthrough
	case 8:
		fmt.Println("The integer was <=8")
		fallthrough
	default:
		fmt.Println("default case")
	}
}
输出如下:
/*
The integer was <= 6
The integer was <= 7
The integer was <= 8
default case
*/

函数::
func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) {
	 函数名       参数             参数            返回值变量       返回值变量
    //这里是处理逻辑代码
    //返回多个值
    return value1, value2
}
上面的代码我们看出

关键字func用来声明一个函数funcName
函数可以有一个或者多个参数，每个参数后面带有类型，通过,分隔
函数可以返回多个值
上面返回值声明了两个变量output1和output2，如果你不想声明也可以，直接就两个类型
如果只有一个返回值且不声明返回值变量，那么你可以省略 包括返回值 的括号
如果没有返回值，那么就直接省略最后的返回信息
如果有返回值， 那么必须在函数的外层添加return语句

package main
import "fmt"

// 返回a、b中最大值.
func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}

func main() {
    x := 3
    y := 4
    z := 5

    max_xy := max(x, y) //调用函数max(x, y)
    max_xz := max(x, z) //调用函数max(x, z)

    fmt.Printf("max(%d, %d) = %d\n", x, y, max_xy)
    fmt.Printf("max(%d, %d) = %d\n", x, z, max_xz)
    fmt.Printf("max(%d, %d) = %d\n", y, z, max(y,z)) // 也可在这直接调用它
}

多个返回值:
package main
import "fmt"

//返回 A+B 和 A*B
func SumAndProduct(A, B int) (int, int) {
    return A+B, A*B
}

func main() {
    x := 3
    y := 4

    xPLUSy, xTIMESy := SumAndProduct(x, y)

    fmt.Printf("%d + %d = %d\n", x, y, xPLUSy)
    fmt.Printf("%d * %d = %d\n", x, y, xTIMESy)
}

上面的例子我们可以看到直接返回了两个参数，当然我们也可以命名返回参数的变量，
这个例子里面只是用了两个类型，我们也可以改成如下这样的定义，
然后返回的时候不用带上变量名，因为直接在函数里面初始化了。
但如果你的函数是导出的(首字母大写)，官方建议：最好命名返回值，
因为不命名返回值，虽然使得代码更加简洁了，但是会造成生成的文档可读性差。

func SumAndProduct(A, B int) (add int, Multiplied int) {
    add = A+B
    Multiplied = A*B
    return
}

变参:
Go函数支持变参。接受变参的函数是有着不定数量的参数的。为了做到这点，首先需要定义函数使其接受变参：
func myfunc(arg ...int) {}
arg ...int告诉Go这个函数接受不定数量的参数。注意，这些参数的类型全部是int。在函数体中，变量arg是一个int的slice：
for _, n := range arg {
    fmt.Printf("And the number is: %d\n", n)
}

传值与传指针:
当我们传一个参数值到被调用函数里面时，实际上是传了这个值的一份copy，当在被调用函数中修改参数值的时候，
调用函数中相应实参不会发生任何变化，因为数值变化只作用在copy上。
package main
import "fmt"

//简单的一个函数，实现了参数+1的操作
func add1(a int) int {
    a = a+1 // 我们改变了a的值
    return a //返回一个新值
}

func main() {
    x := 3

    fmt.Println("x = ", x)  // 应该输出 "x = 3"

    x1 := add1(x)  //调用add1(x)

    fmt.Println("x+1 = ", x1) // 应该输出"x+1 = 4"
    fmt.Println("x = ", x)    // 应该输出"x = 3"
}


package main
import "fmt"

//简单的一个函数，实现了参数+1的操作
func add1(a *int) int { // 请注意，
    *a = *a+1 // 修改了a的值
    return *a // 返回新值
}

func main() {
    x := 3

    fmt.Println("x = ", x)  // 应该输出 "x = 3"

    x1 := add1(&x)  // 调用 add1(&x) 传x的地址

    fmt.Println("x+1 = ", x1) // 应该输出 "x+1 = 4"
    fmt.Println("x = ", x)    // 应该输出 "x = 4"
}

defer:

func ReadWrite() bool {
    file.Open("file")
// 做一些工作
    if failureX {
        file.Close()
        return false
    }

    if failureY {
        file.Close()
        return false
    }

    file.Close()
    return true
}

在defer后指定的函数会在函数退出前调用。
func ReadWrite() bool {
    file.Open("file")
    defer file.Close()
    if failureX {
        return false
    }
    if failureY {
        return false
    }
    return true
}

如果有很多调用defer，那么defer是采用后进先出模式，所以如下代码会输出4 3 2 1 0
for i := 0; i < 5; i++ {
	defer fmt.Printf("%d ", i)
}

函数作为值、类型:
在Go中函数也是一种变量，我们可以通过type来定义它，它的类型就是所有拥有相同的参数，相同的返回值的一种类型
type typeName func(input1 inputType1 , input2 inputType2 [, ...]) (result1 resultType1 [, ...])

package main

import "fmt"

type testInt func(int) bool    // 声明了一个函数类型

func isOdd(integer int) bool {
	if integer%2 == 0 {
		return false
	}
	return true
}

func isEven(integer int) bool {
	if integer%2 == 0 {
		return true
	}
	return false
}


// 声明的函数类型在这个地方当做了一个参数
func filter(slice []int, f testInt) []int {
	var result []int
	for _, value := range slice {
		if f(value) {
			result = append(result, value)
		}
	}
	return result
}

func main() {
	slice := []int{1, 2, 3, 4, 5, 7}
	fmt.Println("slice = ", slice)
	odd := filter(slice, isOdd)
	fmt.Println("Odd elements of slice are:	", odd)
	even := filter(slice, isEven)
	fmt.Println("Even elements of slice are: ", even)
}
/* output
slice =  [1 2 3 4 5 7]
Odd elements of slice are:	 [1 3 5 7]
Even elements of slice are:  [2 4]
*/

Panic和Recover:
Go没有像Java那样的异常机制，它不能抛出异常，而是使用了panic和recover机制
Panic >是一个内建函数，可以中断原有的控制流程，进入一个令人恐慌的流程中
Recover >是一个内建的函数，可以让进入令人恐慌的流程中的goroutine恢复过来。recover仅在延迟函数中有效

package main

import (
	"fmt"
	"os"
)

var user = os.Getenv("USER")

func throwsPanic(f func()) (b bool) {
	defer func() {
		if x := recover(); x != nil {
			b = true
		}
	}()
	f() //执行函数f，如果f中出现了panic，那么就可以恢复回来
	return
}

func main() {
	if user == "" {
		panic("no value for $USER")
	}
	fmt.Println("The user is", user)
}

main函数和init函数:
Go里面有两个保留的函数：init函数（能够应用于所有的package）和main函数（只能应用于package main）
这两个函数在定义时不能有任何的参数和返回值, 虽然一个package里面可以写任意多个init函数
但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个package中每个文件只写一个init函数。

Go程序会自动调用init()和main()，所以你不需要在任何地方调用这两个函数
每个package中的init函数都是可选的，但package main就必须包含一个main函数。

import:
1.相对路径
import “./model” //当前文件同一目录的model目录，但是不建议这种方式来import

2.绝对路径
import “shorturl/model” //加载gopath/src/shorturl/model模块


其他特殊方式
1.点操作
import(
    . "fmt"
)
这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，
也就是前面你调用的fmt.Println("hello world")可以省略的写成Println("hello world")

2.别名操作
import(
    f "fmt"
)
别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println("hello world")

3._操作
import (
    "database/sql"
    _ "github.com/ziutek/mymysql/godrv"
)
_操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。

